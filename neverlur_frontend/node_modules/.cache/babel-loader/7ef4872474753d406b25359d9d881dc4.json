{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/contentpanecontainer/content_pane_container.js\";\nimport React, { Component } from 'react';\nimport './content_pane_container.css';\nimport ListView from '../cardview/cardview_component';\nimport CardView from '../listview/listview_component';\nimport * as THREE from \"three\";\n\nfunction RenderedView(props) {\n  if (props.listView == true) {\n    return /*#__PURE__*/React.createElement(CardView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 16\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(ListView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 16\n      }\n    });\n  }\n}\n\nclass ContentPaneContainer extends Component {\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content-pane-container\",\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default ContentPaneContainer;","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/contentpanecontainer/content_pane_container.js"],"names":["React","Component","ListView","CardView","THREE","RenderedView","props","listView","ContentPaneContainer","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,8BAAP;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACxB,MAAGA,KAAK,CAACC,QAAN,IAAkB,IAArB,EAA0B;AACtB,wBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFD,MAGI;AACA,wBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;AACJ;;AAED,MAAMC,oBAAN,SAAmCP,SAAnC,CAA4C;AAExCQ,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIR,KAAK,CAACS,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIb,KAAK,CAACc,aAAV,EAAf;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACA,SAAKI,KAAL,CAAWC,WAAX,CAAwBJ,QAAQ,CAACK,UAAjC;AACA,QAAIC,QAAQ,GAAG,IAAInB,KAAK,CAACoB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAIxB,KAAK,CAACyB,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AACAf,IAAAA,KAAK,CAACoB,GAAN,CAAWF,IAAX;AACAhB,IAAAA,MAAM,CAACmB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACApB,MAAAA,QAAQ,CAACqB,MAAT,CAAiB5B,KAAjB,EAAwBE,MAAxB;AACD,KALD;;AAMAqB,IAAAA,OAAO;AACR;;AAGHK,EAAAA,MAAM,GAAG;AACL,wBACA;AAAK,MAAA,SAAS,EAAC,wBAAf;AACA,MAAA,GAAG,EAAElB,KAAK,IAAI;AAAE,aAAKA,KAAL,GAAaA,KAAb;AAAmB,OADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAKE;;AA7BkC;;AAgC5C,eAAeZ,oBAAf","sourcesContent":["import React, { Component } from 'react'\nimport './content_pane_container.css'\nimport ListView from '../cardview/cardview_component'\nimport CardView from '../listview/listview_component'\nimport * as THREE from \"three\";\n\nfunction RenderedView(props){\n    if(props.listView == true){\n        return <CardView/>;\n    }\n    else{\n        return <ListView/>;\n    }\n}\n\nclass ContentPaneContainer extends Component{\n\n    componentDidMount() {\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.mount.appendChild( renderer.domElement );\n        var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n        var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n        var cube = new THREE.Mesh( geometry, material );\n        scene.add( cube );\n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n        animate();\n      }\n\n\n    render() {\n        return (       \n        <div className=\"content-pane-container\"\n        ref={mount => { this.mount = mount}}>\n            {/* { <RenderedView listView={true}/> } */}\n        </div>\n        )}\n}\n\nexport default ContentPaneContainer;"]},"metadata":{},"sourceType":"module"}