{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/background/background.js\";\nimport React, { Component } from 'react';\nimport * as THREE from \"three\";\nimport smoke_resource from '../../resource/smoke_resource/smoke_resource';\n\nclass BackgroundComponent extends React.Component {\n  componentDidMount() {\n    let scene,\n        camera,\n        renderer,\n        cloudParticles = [];\n    var image = smoke_resource();\n\n    var init = function (mount) {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 1;\n      camera.rotation.x = 1.16;\n      camera.rotation.y = -0.12;\n      camera.rotation.z = 0.27;\n      let ambient = new THREE.AmbientLight(0x555555);\n      scene.add(ambient); //setting alpha towards total transparency\n\n      renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      scene.fog = new THREE.FogExp2(0x072837, 0.001); //default value, \n\n      renderer.setClearColor(0x000000, 0);\n      mount.appendChild(renderer.domElement);\n      let loader = new THREE.TextureLoader();\n      loader.load(image, function (texture) {\n        let cloudGeo = new THREE.PlaneBufferGeometry(500, 500);\n        let cloudMaterial = new THREE.MeshLambertMaterial({\n          map: texture,\n          transparent: true\n        });\n\n        for (let p = 0; p < 140; p++) {\n          let cloud = new THREE.Mesh(cloudGeo, cloudMaterial);\n          cloud.position.set(Math.random() * 800 - 400, 500, Math.random() * 600 - 450);\n          cloud.rotation.x = 1.16;\n          cloud.rotation.y = -0.12;\n          cloud.rotation.z = Math.random() * 2 * Math.PI;\n          cloud.material.opacity = 0.22;\n          cloudParticles.push(cloud);\n          scene.add(cloud);\n        }\n      });\n      window.addEventListener(\"resize\", onWindowResize, false);\n      render();\n    };\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    var render = function () {\n      cloudParticles.forEach(p => {\n        p.rotation.z -= 0.001;\n      });\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n    };\n\n    init(this.mount);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"background-pane\",\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default BackgroundComponent;","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/background/background.js"],"names":["React","Component","THREE","smoke_resource","BackgroundComponent","componentDidMount","scene","camera","renderer","cloudParticles","image","init","mount","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","rotation","x","y","ambient","AmbientLight","add","WebGLRenderer","alpha","setSize","fog","FogExp2","setClearColor","appendChild","domElement","loader","TextureLoader","load","texture","cloudGeo","PlaneBufferGeometry","cloudMaterial","MeshLambertMaterial","map","transparent","p","cloud","Mesh","set","Math","random","PI","material","opacity","push","addEventListener","onWindowResize","render","aspect","updateProjectionMatrix","forEach","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from \"three\";\nimport smoke_resource from '../../resource/smoke_resource/smoke_resource'\n\nclass BackgroundComponent extends React.Component{\n    componentDidMount() {\n        let scene, camera, renderer, cloudParticles = [];\n        var image = smoke_resource();\n\n        var init = function (mount) {\n          scene = new THREE.Scene();\n          camera = new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,1,1000);\n          camera.position.z = 1;\n          camera.rotation.x = 1.16;\n          camera.rotation.y = -0.12;\n          camera.rotation.z = 0.27;\n          let ambient = new THREE.AmbientLight(0x555555);\n          scene.add(ambient);\n          //setting alpha towards total transparency\n          renderer = new THREE.WebGLRenderer({ alpha: true } );\n          renderer.setSize(window.innerWidth,window.innerHeight);\n          scene.fog = new THREE.FogExp2(0x072837, 0.001);\n          //default value, \n          renderer.setClearColor(0x000000, 0 );\n          mount.appendChild(renderer.domElement);\n\n          let loader = new THREE.TextureLoader();\n            loader.load(image, function(texture){\n                let cloudGeo = new THREE.PlaneBufferGeometry(500,500);\n                let cloudMaterial = new THREE.MeshLambertMaterial({\n                map:texture,\n                transparent: true\n                });\n\n                for(let p=0; p<140; p++) {\n                    let cloud = new THREE.Mesh(cloudGeo, cloudMaterial);\n                    cloud.position.set(\n                      Math.random()*800 -400,\n                      500,\n                      Math.random()*600-450\n                    );\n                    cloud.rotation.x = 1.16;\n                    cloud.rotation.y = -0.12;\n                    cloud.rotation.z = Math.random()*2*Math.PI;\n                    cloud.material.opacity = 0.22;\n                    cloudParticles.push(cloud);\n                    scene.add(cloud);\n                  }\n            });\n          window.addEventListener(\"resize\", onWindowResize, false);\n          render();\n        }\n        \n        function onWindowResize () {\n          camera.aspect = window.innerWidth / window.innerHeight;\n          camera.updateProjectionMatrix();\n          renderer.setSize(window.innerWidth, window.innerHeight);\n        }\n\n        var render =  function () {\n          cloudParticles.forEach(p => {\n              p.rotation.z -= 0.001;\n          })\n          renderer.render(scene,camera);\n          requestAnimationFrame(render);\n        }\n        init(this.mount);\n      }\n\n      render() {\n        return (       \n        <div className=\"background-pane\"\n        ref={mount => { this.mount = mount}}>\n            {}\n        </div>\n        )}\n\n\n}\n\nexport default BackgroundComponent;"]},"metadata":{},"sourceType":"module"}