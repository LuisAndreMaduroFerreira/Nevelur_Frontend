{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { AppContentContext } from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport { AppSearchContext } from '../../context/app_search_context/AppSearchContext';\nimport { AppSearchAddendumContext } from '../../context/app_search_addendum_context/AppSearchAddendumContext';\nimport { build_api_request_url } from '../../request/build_request_url';\n\nfunction getMatchingLanguages(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('^' + escapedValue, 'i');\n  return languages.filter(language => regex.test(language.name));\n}\n/* ----------- */\n\n/*    Utils    */\n\n/* ----------- */\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/* --------------- */\n\n/*    Component    */\n\n/* --------------- */\n\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, suggestion.name);\n}\n\nclass SuggestionBar extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n      console.log(newValue);\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.loadSuggestions(value);\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      isLoading: false\n    };\n    this.lastRequestId = null;\n  }\n\n  loadSuggestions(value) {\n    // Fake request\n    this.lastRequestId = setTimeout(() => {\n      this.setState({\n        isLoading: false,\n        suggestions: [{\n          name: \"1\"\n        }, {\n          name: \"2\"\n        }]\n      });\n    }, 1000);\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: \"Procure \" + \" in Neverlur\",\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSuggestionBar.contextType = AppSearchContext;","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js"],"names":["React","useContext","useEffect","useState","Autosuggest","AppContentContext","AppMainSuggestionContext","AppSearchContext","AppSearchAddendumContext","build_api_request_url","getMatchingLanguages","value","escapedValue","escapeRegexCharacters","trim","regex","RegExp","languages","filter","language","test","name","str","replace","getSuggestionValue","suggestion","renderSuggestion","SuggestionBar","Component","constructor","onChange","event","newValue","setState","console","log","onSuggestionsFetchRequested","loadSuggestions","onSuggestionsClearRequested","suggestions","state","isLoading","lastRequestId","setTimeout","render","inputProps","placeholder","contextType"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState, } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {AppContentContext} from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport {AppSearchContext} from '../../context/app_search_context/AppSearchContext'\nimport {AppSearchAddendumContext} from '../../context/app_search_addendum_context/AppSearchAddendumContext'\nimport {build_api_request_url} from '../../request/build_request_url'\n\n\nfunction getMatchingLanguages(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n  \n  if (escapedValue === '') {\n    return [];\n  }\n  \n  const regex = new RegExp('^' + escapedValue, 'i');\n\n  return languages.filter(language => regex.test(language.name));\n}\n\n/* ----------- */\n/*    Utils    */\n/* ----------- */\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/* --------------- */\n/*    Component    */\n/* --------------- */\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return (\n    <span>{suggestion.name}</span>\n  );\n}\n\nclass SuggestionBar extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      isLoading: false\n    };\n    \n    this.lastRequestId = null;\n  }\n\n  static contextType = AppSearchContext\n\n  loadSuggestions(value) {\n     \n    // Fake request\n    this.lastRequestId = setTimeout(() => {\n      this.setState({\n        isLoading: false,\n        suggestions: [{name:\"1\"}, {name:\"2\"}]\n      });\n    }, 1000);\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n    console.log(newValue)\n  };\n    \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.loadSuggestions(value);\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Procure \"+ \" in Neverlur\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <div>\n        <Autosuggest \n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}