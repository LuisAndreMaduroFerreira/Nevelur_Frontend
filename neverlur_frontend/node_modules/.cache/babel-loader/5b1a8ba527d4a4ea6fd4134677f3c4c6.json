{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { AppContentContext } from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport { AppSearchContext } from '../../context/app_search_context/AppSearchContext';\nimport { AppSearchAddendumContext } from '../../context/app_search_addendum_context/AppSearchAddendumContext';\nimport { build_api_request_url } from '../../request/build_request_url';\nimport './SuggestionBar.css';\n/* ----------- */\n\n/*    Utils    */\n\n/* ----------- */\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/* --------------- */\n\n/*    Component    */\n\n/* --------------- */\n\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, suggestion.name);\n}\n\nclass SuggestionBar extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n      console.log(newValue);\n      console.log(search_paradigm);\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.loadSuggestions(value);\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      isLoading: false\n    };\n    this.lastRequestId = null;\n  }\n\n  loadSuggestions(value) {\n    // Fake request\n    this.lastRequestId = setTimeout(() => {\n      this.setState({\n        isLoading: false,\n        suggestions: [{\n          name: \"1\"\n        }, {\n          name: \"2\"\n        }]\n      });\n    }, 1000);\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: \"Procure \" + \" in Neverlur\",\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSuggestionBar.contextType = AppSearchContext;\nexport default SuggestionBar;","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js"],"names":["React","useContext","useEffect","useState","Autosuggest","AppContentContext","AppMainSuggestionContext","AppSearchContext","AppSearchAddendumContext","build_api_request_url","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","name","renderSuggestion","SuggestionBar","Component","constructor","onChange","event","newValue","setState","value","console","log","search_paradigm","onSuggestionsFetchRequested","loadSuggestions","onSuggestionsClearRequested","suggestions","state","isLoading","lastRequestId","setTimeout","render","inputProps","placeholder","contextType"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState, } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {AppContentContext} from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport {AppSearchContext} from '../../context/app_search_context/AppSearchContext'\nimport {AppSearchAddendumContext} from '../../context/app_search_addendum_context/AppSearchAddendumContext'\nimport {build_api_request_url} from '../../request/build_request_url'\nimport './SuggestionBar.css'\n\n\n/* ----------- */\n/*    Utils    */\n/* ----------- */\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/* --------------- */\n/*    Component    */\n/* --------------- */\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return (\n    <span>{suggestion.name}</span>\n  );\n}\n\nclass SuggestionBar extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      isLoading: false\n    };\n    \n    this.lastRequestId = null;\n  }\n\n  static contextType = AppSearchContext\n\n  loadSuggestions(value) {\n     \n    // Fake request\n    this.lastRequestId = setTimeout(() => {\n      this.setState({\n        isLoading: false,\n        suggestions: [{name:\"1\"}, {name:\"2\"}]\n      });\n    }, 1000);\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n    console.log(newValue)\n    console.log(search_paradigm)\n  };\n    \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.loadSuggestions(value);\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Procure \"+ \" in Neverlur\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <div>\n        <Autosuggest \n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps} />\n      </div>\n    );\n  }\n}\n\nexport default SuggestionBar;"]},"metadata":{},"sourceType":"module"}