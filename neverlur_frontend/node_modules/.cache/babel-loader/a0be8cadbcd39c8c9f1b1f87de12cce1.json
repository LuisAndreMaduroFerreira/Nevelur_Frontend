{"ast":null,"code":"import PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport isString from 'lodash/isString';\nimport React, { Component } from 'react';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport './index.scss';\nexport default class ToggleSwitchBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      enabled: this.enabledFromProps()\n    };\n\n    this.isEnabled = () => this.state.enabled;\n  }\n\n  enabledFromProps() {\n    let {\n      enabled\n    } = this.props; // If enabled is a function, invoke the function\n\n    enabled = isFunction(enabled) ? enabled() : enabled; // Return enabled if it is a boolean, otherwise false\n\n    return isBoolean(enabled) && enabled;\n\n    toggleSwitch = evt => {\n      evt.persist();\n      evt.preventDefault();\n      const {\n        onClick,\n        onStateChanged\n      } = this.props;\n      this.setState({\n        enabled: !this.state.enabled\n      }, () => {\n        const state = this.state; // Augument the event object with SWITCH_STATE\n\n        const switchEvent = Object.assign(evt, {\n          SWITCH_STATE: state\n        }); // Execute the callback functions\n\n        isFunction(onClick) && onClick(switchEvent);\n        isFunction(onStateChanged) && onStateChanged(state);\n      });\n    };\n\n    ToggleSwitchBar.propTypes = {\n      theme: PropTypes.string,\n      enabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n      onStateChanged: PropTypes.func\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/components/modalbar/modalbar_component.js"],"names":["PropTypes","classnames","isString","React","Component","isBoolean","isFunction","ToggleSwitchBar","state","enabled","enabledFromProps","isEnabled","props","toggleSwitch","evt","persist","preventDefault","onClick","onStateChanged","setState","switchEvent","Object","assign","SWITCH_STATE","propTypes","theme","string","oneOfType","bool","func"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAO,cAAP;AAEA,eAAe,MAAMC,eAAN,SAA8BH,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACnDI,KADmD,GAC3C;AAAEC,MAAAA,OAAO,EAAE,KAAKC,gBAAL;AAAX,KAD2C;;AAAA,SAGnDC,SAHmD,GAGvC,MAAM,KAAKH,KAAL,CAAWC,OAHsB;AAAA;;AAKnDC,EAAAA,gBAAgB,GAAG;AACf,QAAI;AAAED,MAAAA;AAAF,QAAc,KAAKG,KAAvB,CADe,CAGnB;;AACAH,IAAAA,OAAO,GAAGH,UAAU,CAACG,OAAD,CAAV,GAAsBA,OAAO,EAA7B,GAAkCA,OAA5C,CAJmB,CAMnB;;AACA,WAAOJ,SAAS,CAACI,OAAD,CAAT,IAAsBA,OAA7B;;AAEAI,IAAAA,YAAY,GAAGC,GAAG,IAAI;AAClBA,MAAAA,GAAG,CAACC,OAAJ;AACAD,MAAAA,GAAG,CAACE,cAAJ;AAEA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAA8B,KAAKN,KAAzC;AAEA,WAAKO,QAAL,CAAc;AAAEV,QAAAA,OAAO,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAvB,OAAd,EAAgD,MAAM;AACpD,cAAMD,KAAK,GAAG,KAAKA,KAAnB,CADoD,CAGpD;;AACA,cAAMY,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcR,GAAd,EAAmB;AAAES,UAAAA,YAAY,EAAEf;AAAhB,SAAnB,CAApB,CAJoD,CAMpD;;AACAF,QAAAA,UAAU,CAACW,OAAD,CAAV,IAAuBA,OAAO,CAACG,WAAD,CAA9B;AACAd,QAAAA,UAAU,CAACY,cAAD,CAAV,IAA8BA,cAAc,CAACV,KAAD,CAA5C;AACD,OATD;AAUD,KAhBH;;AAkBJD,IAAAA,eAAe,CAACiB,SAAhB,GAA4B;AAC1BC,MAAAA,KAAK,EAAEzB,SAAS,CAAC0B,MADS;AAE1BjB,MAAAA,OAAO,EAAET,SAAS,CAAC2B,SAAV,CAAoB,CAC3B3B,SAAS,CAAC4B,IADiB,EAE3B5B,SAAS,CAAC6B,IAFiB,CAApB,CAFiB;AAM1BX,MAAAA,cAAc,EAAElB,SAAS,CAAC6B;AANA,KAA5B;AASC;;AAzCsD","sourcesContent":["import PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport isString from 'lodash/isString';\nimport React, { Component } from 'react';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport './index.scss';\n\nexport default class ToggleSwitchBar extends Component {\n    state = { enabled: this.enabledFromProps() }\n\n    isEnabled = () => this.state.enabled\n    \n    enabledFromProps() {\n        let { enabled } = this.props;\n\n    // If enabled is a function, invoke the function\n    enabled = isFunction(enabled) ? enabled() : enabled;\n\n    // Return enabled if it is a boolean, otherwise false\n    return isBoolean(enabled) && enabled;\n\n    toggleSwitch = evt => {\n        evt.persist();\n        evt.preventDefault();\n    \n        const { onClick, onStateChanged } = this.props;\n    \n        this.setState({ enabled: !this.state.enabled }, () => {\n          const state = this.state;\n    \n          // Augument the event object with SWITCH_STATE\n          const switchEvent = Object.assign(evt, { SWITCH_STATE: state });\n    \n          // Execute the callback functions\n          isFunction(onClick) && onClick(switchEvent);\n          isFunction(onStateChanged) && onStateChanged(state);\n        });\n      }\n\nToggleSwitchBar.propTypes = {\n  theme: PropTypes.string,\n  enabled: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.func\n  ]),\n  onStateChanged: PropTypes.func\n}\n    \n}\n}\n\n"]},"metadata":{},"sourceType":"module"}