{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js\";\nimport React, { useContext, useState } from 'react';\nimport { fetchSuggestionData } from '../../request/fetch_info/axios/axios_fetch_suggestion_data';\nimport { AppContentContext } from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport { AppSearchContext } from '../../context/app_search_context/AppSearchContext';\nimport { AppSearchAddendumContext } from '../../context/app_search_addendum_context/AppSearchAddendumContext';\nimport { build_api_request_url } from '../../request/build_request_url';\nimport './SuggestionBar.css';\nimport Autosuggest from 'react-autosuggest';\n\nconst axios = require('axios');\n\nfunction SuggestionBar() {\n  function escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n\n  function getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n\n    if (escapedValue === '') {\n      return [];\n    }\n\n    const regex = new RegExp('^' + escapedValue, 'i');\n    return suggestions.filter(suggestions => regex.test(suggestions.name));\n  }\n\n  function getSuggestionValue(suggestion) {\n    return suggestion.name;\n  }\n\n  function renderSuggestion(suggestion) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, suggestion.name);\n  }\n\n  const suggestions = [];\n  const [content, setContent] = useContext(AppContentContext);\n  const [search_paradigm, setSearchParadigm] = useContext(AppSearchContext);\n  const [search_suggestion, setSearchSuggestion] = useContext(AppMainSuggestionContext);\n  const [search_addendum, setSearchAddendum] = useState(AppSearchAddendumContext);\n\n  const updateContexts = async event => {\n    if (event.target.value.length > 3) {\n      setSearchAddendum(event.target.value);\n      const url = build_api_request_url(\"neverlur_backend_api\", \"suggestions/\" + search_paradigm, event.target.value); //const response = await fetchSuggestionData(url);\n\n      const response = await axios.get(url).then(function (response) {\n        console.log(response.data);\n        setSearchSuggestion(response.data);\n      });\n    }\n  };\n\n  const onSuggestionsClearRequested = () => {\n    suggestions = [];\n  };\n\n  const onSuggestionsFetchRequested = async () => {// from json string to list of objects\n    // suggestions = [ {name}, {name}, {name}]\n  };\n\n  const handleEnterKeyDown = async event => {\n    if (event.key === 'Enter') {\n      console.log(\"enter for http://localhost:8000/api/\" + search_paradigm + \"/\" + search_addendum);\n      setContent(\"PRESSED WORKING\"); //async get queues\n    }\n  };\n\n  const inputProps = {\n    placeholder: \"Procure \" + search_paradigm + \" in Neverlur\",\n    className: \"searchbar-element\",\n    value: {\n      search_addendum\n    },\n    onChange: updateContexts,\n    onKeyUp: {\n      handleEnterKeyDown\n    }\n  };\n  return /*#__PURE__*/React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default SuggestionBar;","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js"],"names":["React","useContext","useState","fetchSuggestionData","AppContentContext","AppMainSuggestionContext","AppSearchContext","AppSearchAddendumContext","build_api_request_url","Autosuggest","axios","require","SuggestionBar","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","suggestions","filter","test","name","getSuggestionValue","suggestion","renderSuggestion","content","setContent","search_paradigm","setSearchParadigm","search_suggestion","setSearchSuggestion","search_addendum","setSearchAddendum","updateContexts","event","target","length","url","response","get","then","console","log","data","onSuggestionsClearRequested","onSuggestionsFetchRequested","handleEnterKeyDown","key","inputProps","placeholder","className","onChange","onKeyUp"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\nimport { fetchSuggestionData } from '../../request/fetch_info/axios/axios_fetch_suggestion_data';\nimport {AppContentContext} from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport {AppSearchContext} from '../../context/app_search_context/AppSearchContext'\nimport {AppSearchAddendumContext} from '../../context/app_search_addendum_context/AppSearchAddendumContext'\nimport {build_api_request_url} from '../../request/build_request_url'\nimport './SuggestionBar.css';\nimport Autosuggest from 'react-autosuggest';\n\nconst axios = require('axios');\n\nfunction SuggestionBar() {\n\nfunction escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n  \nfunction getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n    \n    if (escapedValue === '') {\n      return [];\n    }\n  \n    const regex = new RegExp('^' + escapedValue, 'i');\n  \n    return suggestions.filter(suggestions => regex.test(suggestions.name));\n}\n  \nfunction getSuggestionValue(suggestion) {\n    return suggestion.name;\n}\n  \nfunction renderSuggestion(suggestion) {\n    return (\n      <span>{suggestion.name}</span>\n    );\n}\n  \n\n    const suggestions = []\n\n    const [content, setContent] = useContext(AppContentContext);\n    const [search_paradigm, setSearchParadigm] = useContext(AppSearchContext);\n    const [search_suggestion, setSearchSuggestion] = useContext(AppMainSuggestionContext);\n    const [search_addendum, setSearchAddendum] = useState(AppSearchAddendumContext);\n    \n\n    const updateContexts = async (event) => {\n        if (event.target.value.length > 3){\n          setSearchAddendum(event.target.value);\n          const url = build_api_request_url(\"neverlur_backend_api\", \"suggestions/\"+search_paradigm, event.target.value)\n          //const response = await fetchSuggestionData(url);\n          const response = await axios.get(url).then(function(response)\n          {\n            console.log(response.data);\n            setSearchSuggestion(response.data);\n          });\n        }} \n\n        const onSuggestionsClearRequested = () => {\n              suggestions= [];\n          };\n    \n        const onSuggestionsFetchRequested = async () => {\n          // from json string to list of objects\n          // suggestions = [ {name}, {name}, {name}]\n        }\n\n        const handleEnterKeyDown = async (event) => {\n          if (event.key === 'Enter') {\n                 console.log(\"enter for http://localhost:8000/api/\"+search_paradigm+\"/\"+search_addendum);\n                 setContent(\"PRESSED WORKING\");\n                 //async get queues\n             }\n    \n         }\n\n          const inputProps = {\n            placeholder: \"Procure \" + search_paradigm + \" in Neverlur\",\n            className: \"searchbar-element\",\n            value: {search_addendum},\n            onChange: updateContexts,\n            onKeyUp: {handleEnterKeyDown}\n          };\n\n    return (\n        <Autosuggest \n          suggestions={suggestions}\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps} />\n    );\n}\n\nexport default SuggestionBar;"]},"metadata":{},"sourceType":"module"}