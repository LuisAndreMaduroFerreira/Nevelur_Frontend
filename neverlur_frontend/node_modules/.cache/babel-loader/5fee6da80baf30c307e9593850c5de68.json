{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { AppContentContext } from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport { AppSearchContext } from '../../context/app_search_context/AppSearchContext';\nimport { AppSearchAddendumContext } from '../../context/app_search_addendum_context/AppSearchAddendumContext';\nimport { build_api_request_url } from '../../request/build_request_url';\nimport './SuggestionBar.css';\n/* ----------- */\n\n/*    Utils    */\n\n/* ----------- */\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/* --------------- */\n\n/*    Component    */\n\n/* --------------- */\n\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, suggestion.name);\n}\n\nconst axios = require('axios');\n\nclass SuggestionBar extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n      console.log(newValue);\n      const search_paradigm = this.context;\n      console.log(\"Would search for \" + search_paradigm[0]);\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      if (value.length > 3) {\n        this.loadSuggestions(value);\n      }\n\n      console.log('Loading');\n      console.log(value);\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n      console.log('Clearing');\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  async loadSuggestions(value) {\n    const search_paradigm = this.context;\n    console.log(\"Searching \" + value);\n    let self = this;\n    const url = build_api_request_url(\"neverlur_backend_api\", \"suggestions/\" + search_paradigm[0], \"black\");\n    const request = await axios.get(url).then(function (response) {\n      self.setState({\n        suggestions: response.data.map(suggestion => suggestion.name)\n      });\n      console.log(\"response: \" + response.data);\n      console.log(\"suggestions: \" + self.suggestions);\n    });\n  }\n\n  render() {\n    const search_paradigm = this.context;\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: \"Procure \" + search_paradigm[0] + \" in Neverlur\",\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSuggestionBar.contextType = AppSearchContext;\nexport default SuggestionBar;","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/component/suggestionbar/SuggestionBar.js"],"names":["React","useContext","useEffect","useState","Autosuggest","AppContentContext","AppMainSuggestionContext","AppSearchContext","AppSearchAddendumContext","build_api_request_url","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","name","renderSuggestion","axios","require","SuggestionBar","Component","constructor","onChange","event","newValue","setState","value","console","log","search_paradigm","context","onSuggestionsFetchRequested","length","loadSuggestions","onSuggestionsClearRequested","suggestions","state","self","url","request","get","then","response","data","map","render","inputProps","placeholder","contextType"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState, } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {AppContentContext} from '../../context/app_content_context/AppContentContext';\nimport { AppMainSuggestionContext } from '../../context/app_main_search_suggestion_context/AppMainSuggestionContext';\nimport {AppSearchContext} from '../../context/app_search_context/AppSearchContext'\nimport {AppSearchAddendumContext} from '../../context/app_search_addendum_context/AppSearchAddendumContext'\nimport {build_api_request_url} from '../../request/build_request_url'\nimport './SuggestionBar.css'\n\n\n/* ----------- */\n/*    Utils    */\n/* ----------- */\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/* --------------- */\n/*    Component    */\n/* --------------- */\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return (\n    <span>{suggestion.name}</span>\n  );\n}\n\nconst axios = require('axios');\n\n\nclass SuggestionBar extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n    \n  }\n\n  static contextType = AppSearchContext;\n  \n  \n  async loadSuggestions(value) {\n    const search_paradigm = this.context;\n    console.log(\"Searching \" + value);\n    let self = this;\n    const url = build_api_request_url(\"neverlur_backend_api\", \"suggestions/\"+search_paradigm[0], \"black\")\n    const request = await axios.get(url).then(function(response) { \n      self.setState({\n        suggestions: response.data.map(suggestion => suggestion.name)\n      });\n      console.log(\"response: \" + response.data)\n      console.log(\"suggestions: \" + self.suggestions)\n    });\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n    console.log(newValue)\n    const search_paradigm = this.context\n    console.log(\"Would search for \" + search_paradigm[0])\n  };\n    \n  onSuggestionsFetchRequested = ({ value }) => {\n    if(value.length > 3){\n    this.loadSuggestions(value);\n  }\n    console.log('Loading');\n    console.log(value);\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n    console.log('Clearing')\n  };\n\n  render() {\n    const search_paradigm = this.context\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Procure \"+search_paradigm[0]+ \" in Neverlur\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <div>\n        <Autosuggest \n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps} />\n      </div>\n    );\n  }\n}\n\nexport default SuggestionBar;"]},"metadata":{},"sourceType":"module"}