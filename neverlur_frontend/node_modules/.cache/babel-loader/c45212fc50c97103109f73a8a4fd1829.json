{"ast":null,"code":"export const fetchGenreData = () => {\n  const genrePromise = fetchGenre();\n  return {\n    genre: wrapPromise(genrePromise)\n  };\n};\n\nconst wrapPromise = promise => {\n  let result;\n  let status = 'pending';\n  let suspender = promise.then(response => {\n    status = 'success';\n    result = response;\n  }, error => {\n    status = 'error';\n    result = error;\n  });\n  return {\n    read() {\n      if (status === 'pending') {\n        throw suspender;\n      } else if (status === 'error') {\n        throw result;\n      } else if (status === 'success') {\n        throw result;\n      }\n    }\n\n  };\n};\n\nconst handleGetJson = url => {\n  console.log(\"fetching\" + url);\n  fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(response => response.json()).catch(error => {\n    console.log(error);\n  }).then(messages => {\n    console.log(\"messages\");\n  });\n};\n\nconst fetchGenre = () => handleGetJson('http://localhost:8000/api/genres/1/');\n/*\nconst fetchGenre = () => fetch('http://localhost:8000/api/genres/1/')\n    .then(response => response.json())\n    .catch(error => console.log(error));\n    */","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/API_requests/test_request.js"],"names":["fetchGenreData","genrePromise","fetchGenre","genre","wrapPromise","promise","result","status","suspender","then","response","error","read","handleGetJson","url","console","log","fetch","headers","json","catch","messages"],"mappings":"AACA,OAAO,MAAMA,cAAc,GAAG,MAAM;AAChC,QAAMC,YAAY,GAAGC,UAAU,EAA/B;AACA,SAAQ;AACJC,IAAAA,KAAK,EAAEC,WAAW,CAACH,YAAD;AADd,GAAR;AAGH,CALM;;AAOP,MAAMG,WAAW,GAAGC,OAAO,IAAI;AAC3B,MAAIC,MAAJ;AACA,MAAIC,MAAM,GAAG,SAAb;AACA,MAAIC,SAAS,GAAGH,OAAO,CAACI,IAAR,CACZC,QAAQ,IAAI;AACRH,IAAAA,MAAM,GAAG,SAAT;AACAD,IAAAA,MAAM,GAAGI,QAAT;AACH,GAJW,EAKZC,KAAK,IAAI;AACJJ,IAAAA,MAAM,GAAG,OAAT;AACAD,IAAAA,MAAM,GAAGK,KAAT;AACJ,GARW,CAAhB;AAUA,SAAO;AACHC,IAAAA,IAAI,GAAE;AACF,UAAGL,MAAM,KAAK,SAAd,EAAyB;AACrB,cAAMC,SAAN;AACH,OAFD,MAGK,IAAGD,MAAM,KAAK,OAAd,EAAuB;AACxB,cAAMD,MAAN;AACH,OAFI,MAGA,IAAGC,MAAM,KAAK,SAAd,EAAyB;AAC1B,cAAMD,MAAN;AACH;AAEJ;;AAZE,GAAP;AAcH,CA3BD;;AA8BA,MAAMO,aAAa,GAAIC,GAAD,IAAS;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,GAAzB;AACAG,EAAAA,KAAK,CAACH,GAAD,EAAM;AACPI,IAAAA,OAAO,EAAG;AACR,sBAAgB,kBADR;AAER,gBAAU;AAFF;AADH,GAAN,CAAL,CAMGT,IANH,CAMSC,QAAD,IAAcA,QAAQ,CAACS,IAAT,EANtB,EAOGC,KAPH,CAOST,KAAK,IAAI;AAACI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAAmB,GAPtC,EAQGF,IARH,CAQSY,QAAD,IAAc;AAACN,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAAyB,GARhD;AASD,CAXH;;AAaA,MAAMd,UAAU,GAAG,MAAMW,aAAa,CAClC,qCADkC,CAAtC;AAGA","sourcesContent":["\nexport const fetchGenreData = () => {\n    const genrePromise = fetchGenre();\n    return  {\n        genre: wrapPromise(genrePromise)\n    }\n}\n\nconst wrapPromise = promise => {\n    let result;\n    let status = 'pending';\n    let suspender = promise.then(\n        response => {\n            status = 'success';\n            result = response;\n        },\n        error => {\n             status = 'error';\n             result = error;\n        });\n\n    return {\n        read(){\n            if(status === 'pending') {\n                throw suspender;\n            }\n            else if(status === 'error') {\n                throw result;\n            }\n            else if(status === 'success') {\n                throw result;\n            }\n\n        }\n    }\n}\n\n\nconst handleGetJson = (url) => {\n    console.log(\"fetching\" + url);\n    fetch(url, {\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n         }\n      })\n      .then((response) => response.json())\n      .catch(error => {console.log(error)})\n      .then((messages) => {console.log(\"messages\");});\n  }\n\nconst fetchGenre = () => handleGetJson(\n    'http://localhost:8000/api/genres/1/');\n\n/*\nconst fetchGenre = () => fetch('http://localhost:8000/api/genres/1/')\n    .then(response => response.json())\n    .catch(error => console.log(error));\n    */"]},"metadata":{},"sourceType":"module"}