{"ast":null,"code":"var _jsxFileName = \"/home/lasmf/Bragr_Frontend/bragr_frontend/src/components/modalbar/modalbar_component.js\";\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport isString from 'lodash/isString';\nimport React, { Component } from 'react';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport './index.scss';\nexport default class ToggleSwitchBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      enabled: this.enabledFromProps()\n    };\n\n    this.isEnabled = () => this.state.enabled;\n  }\n\n  enabledFromProps() {\n    let {\n      enabled\n    } = this.props; // If enabled is a function, invoke the function\n\n    enabled = isFunction(enabled) ? enabled() : enabled; // Return enabled if it is a boolean, otherwise false\n\n    return isBoolean(enabled) && enabled;\n\n    ToggleSwitchBar = evt => {\n      evt.persist();\n      evt.preventDefault();\n      const {\n        onClick,\n        onStateChanged\n      } = this.props;\n      this.setState({\n        enabled: !this.state.enabled\n      }, () => {\n        const state = this.state; // Augument the event object with SWITCH_STATE\n\n        const switchEvent = Object.assign(evt, {\n          SWITCH_STATE: state\n        }); // Execute the callback functions\n\n        isFunction(onClick) && onClick(switchEvent);\n        isFunction(onStateChanged) && onStateChanged(state);\n      });\n    };\n\n    ToggleSwitchBar.propTypes = {\n      theme: PropTypes.string,\n      enabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n      onStateChanged: PropTypes.func\n    };\n  }\n\n  render() {\n    const {\n      enabled\n    } = this.state; // Isolate special props and store the remaining as restProps\n\n    const {\n      enabled: _enabled,\n      theme,\n      onClick,\n      className,\n      onStateChanged,\n      ...restProps\n    } = this.props; // Use default as a fallback theme if valid theme is not passed\n\n    const switchTheme = theme && isString(theme) ? theme : 'default';\n    const switchClasses = classnames(`switch switch--${switchTheme}`, className);\n    const togglerClasses = classnames('switch-toggle', `switch-toggle--${enabled ? 'on' : 'off'}`);\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: switchClasses,\n      onClick: this.toggleSwitch\n    }, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: togglerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/lasmf/Bragr_Frontend/bragr_frontend/src/components/modalbar/modalbar_component.js"],"names":["PropTypes","classnames","isString","React","Component","isBoolean","isFunction","ToggleSwitchBar","state","enabled","enabledFromProps","isEnabled","props","evt","persist","preventDefault","onClick","onStateChanged","setState","switchEvent","Object","assign","SWITCH_STATE","propTypes","theme","string","oneOfType","bool","func","render","_enabled","className","restProps","switchTheme","switchClasses","togglerClasses","toggleSwitch"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport isString from 'lodash/isString';\nimport React, { Component } from 'react';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport './index.scss';\n\nexport default class ToggleSwitchBar extends Component {\n    state = { enabled: this.enabledFromProps() }\n\n    isEnabled = () => this.state.enabled\n\n    enabledFromProps() {\n        let { enabled } = this.props;\n\n    // If enabled is a function, invoke the function\n    enabled = isFunction(enabled) ? enabled() : enabled;\n\n    // Return enabled if it is a boolean, otherwise false\n    return isBoolean(enabled) && enabled;\n\n    ToggleSwitchBar = evt => {\n        evt.persist();\n        evt.preventDefault();\n    \n        const { onClick, onStateChanged } = this.props;\n    \n        this.setState({ enabled: !this.state.enabled }, () => {\n          const state = this.state;\n    \n          // Augument the event object with SWITCH_STATE\n          const switchEvent = Object.assign(evt, { SWITCH_STATE: state });\n    \n          // Execute the callback functions\n          isFunction(onClick) && onClick(switchEvent);\n          isFunction(onStateChanged) && onStateChanged(state);\n        });\n      }\n\nToggleSwitchBar.propTypes = {\n  theme: PropTypes.string,\n  enabled: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.func\n  ]),\n  onStateChanged: PropTypes.func\n}\n    }\nrender() {\n    const { enabled } = this.state;\n\n    // Isolate special props and store the remaining as restProps\n    const { enabled: _enabled, theme, onClick, className, onStateChanged, ...restProps } = this.props;\n\n    // Use default as a fallback theme if valid theme is not passed\n    const switchTheme = (theme && isString(theme)) ? theme : 'default';\n\n    const switchClasses = classnames(\n      `switch switch--${switchTheme}`,\n      className\n    )\n\n    const togglerClasses = classnames(\n      'switch-toggle',\n      `switch-toggle--${enabled ? 'on' : 'off'}`\n    )\n\n    return (\n      <div className={switchClasses} onClick={this.toggleSwitch} {...restProps}>\n        <div className={togglerClasses}></div>\n      </div>\n    )\n  }\n    \n\n}\n\n"]},"metadata":{},"sourceType":"module"}